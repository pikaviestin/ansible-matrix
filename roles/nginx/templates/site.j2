# {{ ansible_managed }}

{% if nginx_upstreams is defined %}
# Upstreams
{% for upstream in nginx_upstreams | dict2items %}
{% if upstream.value.servers | length != 0 %}
{% if upstream.key == 'draupnir_report' and not (draupnir_abuse_reporting_enabled | default(false)) %}
{% else %}
upstream {{ upstream.key }} {
{% if upstream.value.method is defined %}
	{{ upstream.value.method }};
{% endif %}
{% for server in upstream.value.servers %}
{% if server | int != 0 %}
	server 127.0.0.1:{{ server }};
{% else %}
	server {{ server }};
{% endif %}
{% endfor %}
}

{% endif %}
{% endif %}
{% endfor %}
{% endif %}

{% if nginx_maps is defined %}
{% for map in nginx_maps | dict2items %}
{% if map.value.var | default('') | length != 0 %}
map ${{ map.value.var }} ${{ map.key }} {
{% for rule in map.value.rules | dict2items %}
	{{ rule.key }} {{ rule.value }};
{% endfor %}
}

{% endif %}
{% endfor %}
{% endif %}

{% if nginx_certbot %}
# HTTP -> HTTPS redirect
server {
	listen       0.0.0.0:80 default_server;
{% if ansible_default_ipv6.address is defined %}
	listen       [::]:80 default_server;
{% endif %}
	server_name  {{ ansible_fqdn }};
	location / {
		return 301 https://$host$request_uri;
	}
}
{% endif %}

# Websocket map
map $http_upgrade $connection_upgrade {
	default upgrade;
	''      close;
}

{% for server in nginx_servers %}
{% if server.enabled | default(true) %}
server {
{% set has_localhost_listener = server.listen | default([{}]) | selectattr('ip', 'defined') | selectattr('ip', 'equalto', 'localhost') | list | length > 0 %}
{% for listener in server.listen | default([{}]) %}
{% set listener_ip = listener.ip | default('all') %}
{% set listener_port = listener.port | default('443' if nginx_certbot else '80') %}
{% set is_default = server.name is not defined or server.name == ansible_fqdn %}
{% set ssl_options = 'ssl http2' if nginx_certbot else '' %}

{% if listener_ip == 'all' %}
	listen        0.0.0.0:{{ listener_port }} {{ ssl_options }} {{ 'default_server' if is_default }};
{% if ansible_default_ipv6.address is defined %}
	listen        [::]:{{ listener_port }} {{ ssl_options }} {{ 'default_server' if is_default }};
{% endif %}
{% elif listener_ip == 'localhost' %}
	listen        127.0.0.1:{{ listener_port }} default_server;
{% if ansible_default_ipv6.address is defined %}
	listen        [::1]:{{ listener_port }} default_server;
{% endif %}
{% elif ':' in listener_ip %}
	listen        [{{ listener_ip }}]:{{ listener_port }} {{ ssl_options }} {{ 'default_server' if is_default }};
{% elif listener_ip | regex_search('^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$') %}
	listen        {{ listener_ip }}:{{ listener_port }} {{ ssl_options }} {{ 'default_server' if is_default }};
{% endif %}
{% endfor %}
{% if has_localhost_listener %}
	server_name   {{ server.name | default(ansible_fqdn) }} localhost;
{% else %}
	server_name   {{ server.name | default(ansible_fqdn) }};
{% endif %}

{% if server.return is defined %}
# Simple returns
{% for return in server.return %}
	location {{ return.location }} {
		return {{ return.type | default('200') }} '{{ return.content | to_json if return.content_type | default('plain') == 'json' else return.content }}';
{% if return.headers is defined and return.headers is mapping %}
{% for header in return.headers | dict2items %}
		add_header {{ header.key }} {{ header.value }};
{% endfor %}
{% endif %}
	}
{% endfor %}
{% endif %}

{% if server.custom_locations is defined %}
# Custom locations
{% for location in server.custom_locations %}
{% if location.proxy_pass is defined and 'draupnir_report' in location.proxy_pass %}
{% if draupnir_abuse_reporting_enabled | default(false) %}
	location {{ location.name }} {
{% if location.options is defined %}
{% for option in location.options %}
		{{ option }};
{% endfor %}
{% endif %}
{% if location.headers is defined and location.headers is mapping %}
{% for header in location.headers | dict2items %}
		add_header {{ header.key }} {{ header.value }};
{% endfor %}
{% endif %}
		proxy_pass {{ location.proxy_pass }};
	}
{% endif %}
{% else %}
	location {{ location.name }} {
{% if location.options is defined %}
{% for option in location.options %}
		{{ option }};
{% endfor %}
{% endif %}
{% if location.headers is defined and location.headers is mapping %}
{% for header in location.headers | dict2items %}
		add_header {{ header.key }} {{ header.value }};
{% endfor %}
{% endif %}
{% if location.proxy_pass is defined %}
		proxy_pass {{ location.proxy_pass }};
{% endif %}
	}
{% endif %}
{% endfor %}
{% endif %}

{% if server.reverse_proxy is defined %}
# Reverse proxy
{% for upstream in server.reverse_proxy %}
{% if nginx_upstreams[upstream].servers | default([]) | length != 0 %}

# {{ upstream }}
{% for location in nginx_upstreams[upstream].locations | default([{'name': '/'}]) %}

{% if location.name | default('') | length != 0 %}
	location {{ location.name }} {
		proxy_pass http://{{ upstream }};
		proxy_http_version 1.1;
{% if location.proxy_headers is defined and location.proxy_headers is mapping %}
{% for header in location.proxy_headers | dict2items %}
		proxy_set_header {{ header.key }} {{ header.value }};
{% endfor %}
{% endif %}
{% if nginx_proxy_headers is defined and nginx_proxy_headers is mapping %}
{% for header in nginx_proxy_headers | dict2items %}
{% if location.proxy_headers is not defined or location.proxy_headers[header.key] is not defined %}
		proxy_set_header {{ header.key }} {{ header.value }};
{% endif %}
{% endfor %}
{% endif %}
{% if location.additional_options is defined %}
{% for item in location.additional_options %}
		{{ item }};
{% endfor %}
{% endif %}
	}
{% endif %}

{% endfor %}
{% endif %}

{% endfor %}
{% endif %}

{% if server.reverse_proxy_map is defined %}
# Mapping reverse proxy
{% for map in server.reverse_proxy_map %}
{% if nginx_maps[map].var | length != 0 %}

# {{ map }}
{% for location in nginx_maps[map].locations %}

{% if location.name | length != 0 %}
	location {{ location.name }} {
		proxy_pass http://${{ map }};
		proxy_http_version 1.1;
{% if nginx_proxy_headers is mapping %}
{% for header in nginx_proxy_headers | dict2items %}
		proxy_set_header {{ header.key }} {{ header.value }};
{% endfor %}
{% endif %}
{% if location.additional_options is defined %}
{% for item in location.additional_options %}
		{{ item }};
{% endfor %}
{% endif %}
	}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
}

{% endif %}
{% endfor %}
